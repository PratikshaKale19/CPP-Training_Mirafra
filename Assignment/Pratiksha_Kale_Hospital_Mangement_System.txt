#include <iostream>
#include <string>
#include <stack>

using namespace std;

// Node structure for the patient record
struct PatientNode {
    int patientId;
    string patientName;
    PatientNode* left;
    PatientNode* right;

    PatientNode(int id, const string& name)
        : patientId(id), patientName(name), left(nullptr), right(nullptr) {}
};

// Node structure for the department hierarchy
struct DepartmentNode {
    int deptId;  // Department ID
    string departmentName;
    DepartmentNode* left;
    DepartmentNode* right;
    PatientNode* patientRoot; // Root of the patient records in this department

    DepartmentNode(int id, const string& name)
        : deptId(id), departmentName(name), left(nullptr), right(nullptr), patientRoot(nullptr) {}
};

// Hospital class that manages both departments and patient records
class Hospital {
private:
    DepartmentNode* departmentRoot; // Root of the department hierarchy

    //  function for non-recursive in-order traversal for patient records
    void inOrderPatients(PatientNode* root) {
        stack<PatientNode*> s;
        PatientNode* current = root;

        while (current != nullptr || !s.empty()) {
            while (current != nullptr) {
                s.push(current);
                current = current->left;
            }
            current = s.top();
            s.pop();
            cout << "Patient ID: " << current->patientId << ", Name: " << current->patientName << endl;
            current = current->right;
        }
    }

    //  function to insert a patient record in sorted order
    PatientNode* insertPatient(PatientNode* root, int patientId, const string& patientName) {
        if (root == nullptr) {
            return new PatientNode(patientId, patientName);
        }
        if (patientId < root->patientId) {
            root->left = insertPatient(root->left, patientId, patientName);
        } else if (patientId > root->patientId) {
            root->right = insertPatient(root->right, patientId, patientName);
        }
        return root;
    }

    //  function to delete a patient by ID
    PatientNode* deletePatient(PatientNode* root, int patientId) {
        if (root == nullptr) {
            return root;
        }

        if (patientId < root->patientId) {
            root->left = deletePatient(root->left, patientId);
        } else if (patientId > root->patientId) {
            root->right = deletePatient(root->right, patientId);
        } else {
            if (root->left == nullptr) {
                PatientNode* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                PatientNode* temp = root->left;
                delete root;
                return temp;
            }

            PatientNode* temp = findMin(root->right);
            root->patientId = temp->patientId;
            root->patientName = temp->patientName;
            root->right = deletePatient(root->right, temp->patientId);
        }
        return root;
    }

    // to find the minimum value node in a subtree
    PatientNode* findMin(PatientNode* root) {
        while (root && root->left != nullptr) {
            root = root->left;
        }
        return root;
    }

    //  to insert a department in the department hierarchy
    DepartmentNode* insertDepartment(DepartmentNode* root, int deptId, const string& departmentName) {
        if (root == nullptr) {
            return new DepartmentNode(deptId, departmentName);
        }
        if (deptId < root->deptId) {
            root->left = insertDepartment(root->left, deptId, departmentName);
        } else if (deptId > root->deptId) {
            root->right = insertDepartment(root->right, deptId, departmentName);
        }
        return root;
    }

    // to display department hierarchy
    void inOrderDepartments(DepartmentNode* root) {
        stack<DepartmentNode*> s;
        DepartmentNode* current = root;

        while (current != nullptr || !s.empty()) {
            while (current != nullptr) {
                s.push(current);
                current = current->left;
            }
            current = s.top();
            s.pop();
            cout << "Department ID: " << current->deptId << ", Name: " << current->departmentName << endl;
            if (current->patientRoot != nullptr) {
                cout << "  Patient Records: " << endl;
                inOrderPatients(current->patientRoot);
            }
            current = current->right;
        }
    }

public:
    Hospital() : departmentRoot(nullptr) {}

    // Function to add a department
    void addDepartment(int deptId, const string& departmentName) {
        departmentRoot = insertDepartment(departmentRoot, deptId, departmentName);
    }

    // Function to add a patient record to a specific department
    void addPatientToDepartment(int deptId, int patientId, const string& patientName) {
        DepartmentNode* department = findDepartment(departmentRoot, deptId);
        if (department) {
            department->patientRoot = insertPatient(department->patientRoot, patientId, patientName);
        } else {
            cout << "Department not found!" << endl;
        }
    }

    // Function to remove a patient by ID
    void removePatientFromDepartment(int deptId, int patientId) {
        DepartmentNode* department = findDepartment(departmentRoot, deptId);
        if (department) {
            department->patientRoot = deletePatient(department->patientRoot, patientId);
        } else {
            cout << "Department not found!" << endl;
        }
    }

    // Function to display all departments and their patient records
    void displayHospital() {
        inOrderDepartments(departmentRoot);
    }

private:
    //  find a department by deptId
    DepartmentNode* findDepartment(DepartmentNode* root, int deptId) {
        if (root == nullptr) return nullptr;
        if (deptId < root->deptId) {
            return findDepartment(root->left, deptId);
        } else if (deptId > root->deptId) {
            return findDepartment(root->right, deptId);
        } else {
            return root;
        }
    }
};

int main() {
    Hospital hospital;

    // Add departments
    hospital.addDepartment(2, "Neurology");
    hospital.addDepartment(1, "Cardiology");
    hospital.addDepartment(3, "Surgery");
    hospital.addDepartment(4, "Urology");

    // Add patients to departments
    hospital.addPatientToDepartment(1, 101, "Pratiksha");
    hospital.addPatientToDepartment(1, 102, "Sandhya");
    hospital.addPatientToDepartment(1, 103, "Ashwini");
    hospital.addPatientToDepartment(3, 301, "sayali");
    hospital.addPatientToDepartment(3, 302, "prachi");

    // Display hospital departments and patient records
    cout << "Hospital Departments and Patient Records:" << endl;
    hospital.displayHospital();

    // Remove a patient
    cout << "\nRemoving patient 101 from Cardiology..." << endl;
    hospital.removePatientFromDepartment(1, 101);

    // Display updated hospital departments and patient records
    cout << "\nUpdated Hospital Departments and Patient Records:" << endl;
    hospital.displayHospital();

    return 0;
}




